# Simple vLLM Router deployment that builds from source
apiVersion: v1
kind: Pod
metadata:
  name: vllm-router
  labels:
    app: vllm-router
spec:
  initContainers:
  - name: source-copier
    image: alpine/git:latest
    command: ["/bin/sh", "-c"]
    args:
    - |
      cd /workspace && \
      git clone https://github.com/Prowindy/vllm-router.git . && \
      echo "Source code copied successfully"
    volumeMounts:
    - name: source-volume
      mountPath: /workspace
  containers:
  - name: vllm-router
    image: python:3.11-slim
    command: ["/bin/bash", "-c"]
    args:
    - |
      set -e
      echo "Installing system dependencies..."
      apt-get update && apt-get install -y \
        curl \
        git \
        build-essential \
        gcc \
        libc6-dev \
        pkg-config \
        libssl-dev

      echo "Installing Rust..."
      curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      . $HOME/.cargo/env

      echo "Building vllm-router..."
      cd /workspace
      pip install setuptools-rust wheel build requests

      # Build the Rust binary directly for better performance
      cargo build --release

      echo "Starting vllm-router..."
      ./target/release/vllm-router \
        --host 0.0.0.0 \
        --port 8080 \
        --worker-urls http://10.100.31.179:8000 \
        --prometheus-host 0.0.0.0 \
        --prometheus-port 29000 \
        --log-level info
    ports:
    - containerPort: 8080
      name: http
    - containerPort: 29000
      name: metrics
    env:
    - name: RUST_LOG
      value: "info"
    volumeMounts:
    - name: source-volume
      mountPath: /workspace
    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "4"
        memory: "8Gi"
  volumes:
  - name: source-volume
    emptyDir: {}
  restartPolicy: Never

---
# Service to expose vLLM Router
apiVersion: v1
kind: Service
metadata:
  name: vllm-router-service
spec:
  selector:
    app: vllm-router
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    nodePort: 30081
  - name: metrics
    port: 29000
    targetPort: 29000
    nodePort: 30082
  type: NodePort
